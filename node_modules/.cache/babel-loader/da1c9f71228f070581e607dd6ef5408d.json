{"ast":null,"code":"var _jsxFileName = \"/home/ruben/repos/blueprints/mon-cv/src/components/header/Navbar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport menuList from '../../utils/header/menuList';\nimport BurgerMenu from './BurgerMenu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Navbar() {\n  _s();\n\n  // Set up a state to check the current window width size\n  const [windowWidth, setWindowWidth] = useState({\n    winWidth: window.innerWidth\n  });\n\n  const detectWidth = () => {\n    setWindowWidth({\n      winWidth: window.innerWidth\n    });\n  }; // Initiate an event to update any width changes when the window is resized\n\n\n  useEffect(() => {\n    window.addEventListener('resize', detectWidth);\n    return () => {\n      window.removeEventListener('resize', detectWidth);\n    };\n  }, [windowWidth]);\n  const menu = menuList.map(item => /*#__PURE__*/_jsxDEV(\"a\", {\n    href: item.linkUrl,\n    className: \"menu-link\",\n    children: /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"menu-item\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"menu-title\",\n        children: item.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, item.index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"navbar\",\n    children: windowWidth.winWidth <= 768 ? /*#__PURE__*/_jsxDEV(BurgerMenu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"menu\",\n      children: menu\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Navbar, \"r7MiVCnxzZwWYvgOUd5+EV8orJ4=\");\n\n_c = Navbar;\nexport default Navbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["React","useState","useEffect","menuList","BurgerMenu","Navbar","windowWidth","setWindowWidth","winWidth","window","innerWidth","detectWidth","addEventListener","removeEventListener","menu","map","item","linkUrl","title","index"],"sources":["/home/ruben/repos/blueprints/mon-cv/src/components/header/Navbar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport menuList from '../../utils/header/menuList';\nimport BurgerMenu from './BurgerMenu';\n\nfunction Navbar() {\n  // Set up a state to check the current window width size\n  const [windowWidth, setWindowWidth] = useState({ winWidth: window.innerWidth });\n\n  const detectWidth = () => {\n    setWindowWidth({ winWidth: window.innerWidth });\n  };\n\n  // Initiate an event to update any width changes when the window is resized\n  useEffect(() => {\n    window.addEventListener('resize', detectWidth);\n\n    return () => {\n      window.removeEventListener('resize', detectWidth);\n    };\n  }, [windowWidth]);\n\n  const menu = menuList.map((item) => (\n    <a key={item.index} href={item.linkUrl} className=\"menu-link\">\n      <li className=\"menu-item\">\n        <p className=\"menu-title\">{ item.title }</p>\n      </li>\n    </a>\n  ));\n\n  return (\n    <div className=\"navbar\">\n      {/*\n        Whenever the width of the window is at least 768px wide,\n\n      */}\n      { windowWidth.winWidth <= 768\n        ? (\n          <BurgerMenu />\n        )\n        : (\n          <ul className=\"menu\">\n            {menu}\n          </ul>\n        )}\n    </div>\n  );\n}\n\nexport default Navbar;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,SAASC,MAAT,GAAkB;EAAA;;EAChB;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC;IAAEO,QAAQ,EAAEC,MAAM,CAACC;EAAnB,CAAD,CAA9C;;EAEA,MAAMC,WAAW,GAAG,MAAM;IACxBJ,cAAc,CAAC;MAAEC,QAAQ,EAAEC,MAAM,CAACC;IAAnB,CAAD,CAAd;EACD,CAFD,CAJgB,CAQhB;;;EACAR,SAAS,CAAC,MAAM;IACdO,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCD,WAAlC;IAEA,OAAO,MAAM;MACXF,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCF,WAArC;IACD,CAFD;EAGD,CANQ,EAMN,CAACL,WAAD,CANM,CAAT;EAQA,MAAMQ,IAAI,GAAGX,QAAQ,CAACY,GAAT,CAAcC,IAAD,iBACxB;IAAoB,IAAI,EAAEA,IAAI,CAACC,OAA/B;IAAwC,SAAS,EAAC,WAAlD;IAAA,uBACE;MAAI,SAAS,EAAC,WAAd;MAAA,uBACE;QAAG,SAAS,EAAC,YAAb;QAAA,UAA4BD,IAAI,CAACE;MAAjC;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF,GAAQF,IAAI,CAACG,KAAb;IAAA;IAAA;IAAA;EAAA,QADW,CAAb;EAQA,oBACE;IAAK,SAAS,EAAC,QAAf;IAAA,UAKIb,WAAW,CAACE,QAAZ,IAAwB,GAAxB,gBAEE,QAAC,UAAD;MAAA;MAAA;MAAA;IAAA,QAFF,gBAKE;MAAI,SAAS,EAAC,MAAd;MAAA,UACGM;IADH;MAAA;MAAA;MAAA;IAAA;EAVN;IAAA;IAAA;IAAA;EAAA,QADF;AAiBD;;GA1CQT,M;;KAAAA,M;AA4CT,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}